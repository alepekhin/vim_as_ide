Use Ctrl-] to jump

|NERDTree|
|Vim|
|IDE|
|Ubuntu|
|Idea|
|Firfox|
|bash|
|psql|
|clickhouse-client|
|jdb|

*NERDTree*
I               show hidden files
o               open first file
i               open second file in horisontal split
s               open second file in vertical split
C               change tree root to the selected dir
m               File System menu (create, delete files, directories etc)
O               recursively open node

*Vim*

""y            	    copy to system clipboard
""p            	    read from system clipboard
G              	    last line
gg             	    first line
u                   undo
Ctrl-r              redo
Ctrl-n              suggestions for complete
:r file        	    insert file content
:r!cmd         	    insert shell cmd output
:ls            	    list buffers
:bn            	    next  buffer:
:b3            	    3-rd  buffer
:split file    	    split and open file
:vsplit file   	    split and open file verically
:diffthis      	    turn on diff mode (do it on both split)
:diffoff       	    turn off diff mode
10 Ctrl-w _    	    set height of splited window to 10
10 Ctrl-w |    	    set width of splited window to 10
Ctrl-w +/-     	    increase/decrease height
Ctrl-w >/<     	    increase/decrease width
:Ctrl-r "      	    copy yanked text to cmd
:!open file    	    play pdf, mp4 in OS
qa            	    start writing macro to a
q             	    stop writing macro
@a             	    play macro
gg=G                format file from begin to end
:!ctags -R --exclude=build .	    create tags file in project directory
:set number	        show line numbers

*IDE*

--- cscope integration ---
#find . -name '*.java' > cscope.files
#cscope -b
Ctrl-\ s            search symbol
Ctrl-\ space        search symbol
Ctrl-t              jump back
Ctrl-\ g            search global definition
:cs find g word     search global definition, yank word before, if Ctrl-| g does not work

--- debugging ---
For debugging single test in gradle Java project
gradle test --tests SampleTest --debug-jvm
In another terminal
# jdb -attach 5005
> stop at package.SampleTest:line_number_here
> run
> help
> use src/main/java:src/test/java       - source path
> list                                  - list source
> next                                  - step one line over calls
> step                                  - step into
> step up                               - execute until the current method returns to its caller
> locals                                - print local variables
> dump var                              - print var decompressed, can print arrays

*Ubuntu*

Alt-Esc		switch windows directly
Alt-Tab  	switch windows       
Alt-F6	  	switch app windows  
Alt-Space 	app window menu   
Alt-F4  	close window       
Alt-F7  	move window       
Alt-F8  	resize window                                    
Alt-F10 	toggle maximize/minimize window                  
Super-H 	hide window      
Super-D 	hide all windows          
Super-Home 	switch to workspace 1 
Super-Up 	maximize window        
Super-Down 	minimize window    
Super-Left 	split window to left         
Super-Right 	split window to rigth  
Super-A  	show all applications    
Super-V  	show notifications (upper menus)
Super-S  	show overview                  
SHift-F10 	right mouse click            
Fn-F2  	toggle touchpad             

*Idea*

Alt-2 		tool Gradle
Alt-1 		tool Project
Alt-0 		tool Commit 
Alt-7 		tool Terminal
Alt-4 		tool Run
Alt-5 		tool Debug
Alt-Q K 	keep tab open
Alt-Q C 	close tab
Alt-Q A 	close all tabs
Alt-Q O 	close other tabs
Alt-Q left/right resize
Alt-Q R 	run test
Ctrl-F8 	toggle break point
Ctrl-E 		recent files popup                  
Ctrl-B 		go to declaration
Alt-Left/Right 	go to tab in editor
Super-Left 	split window to left                          

*Firfox*

Ctrl-B 		Show/hide bookmarks  
Ctrl-L 		go to address string
Ctrl-T 		open new tab       
Ctrl-W 		close tab         

*bash*

lsof -p PID 		files opened by PID
lsof -i -n -P       	ports busy and user command
sudo netstat -tulpn     the same
grep -rin --include \*.groovy pattern .
grep -rIH 'pattern'  	file files containing pattern
grep 'pattern' *     	get filename and matched lines
grep -l 'pattern' *  	get filenames only
grep -l 'pattern' * | xargs sed -i 's/old/new/g' replace in all files
ls -l | awk '{print $3}' print 3rd column
  
find . -type f -exec sed -i 's/old/new/g' {} \;     replace in all found files
   
files . -name "file*" -exec rename -n "s/old/new/" {}  \;  rename all files

*psql*

psql -h host -U user -d database (password in ~/.pgpass)
\l			list databases
\c [database]		view or change current database
\d [schema.*]		view tables [in schema] full
\d+ schema.table	view table with DDL
\dt [schema.*]		view tables [in schema] short
\dE+ [schema.*]		view foreign tables [in schema] short
\dv [schema.*]		view views [in schema]
\dT [schema.*]		view types [in schema]
\df [schema.*]		view functions [in schema]
\dn             	list schemas
\copy (select statement) to 'file name'
\copy table to 'file name' csv
\copy table from 'file name' csv
\i file			execute sql file
\timing         print elapsed time

*clickhouse-client*

clickhouse-client -h host -u user -d database ( password in ~/.clickhouse-client/config.xml)
show databases			list databases
SELECT currentDatabase()	view current database
use database			change current database
show tables			view tables and views
describe table			view columns
show create table <table>	view with engine
clickhouse-client --multiquery < script.sql	execute sql file
select cluster,shard_num,replica_num,host_address,port from system.clusters;
select database,table,engine,total_replicas,queue_size from system.replicas;
select database,name,engine,sorting_key from system.tables order by engine;

*jdb*

connectors                -- list available connectors and transports in this VM

run [class [args]]        -- start execution of application's main class

threads [threadgroup]     -- list threads in threadgroup. Use current threadgroup if none specified.
thread <thread id>        -- set default thread
suspend [thread id(s)]    -- suspend threads (default: all)
resume [thread id(s)]     -- resume threads (default: all)
where [<thread id> | all] -- dump a thread's stack
wherei [<thread id> | all]-- dump a thread's stack, with pc info
up [n frames]             -- move up a thread's stack
down [n frames]           -- move down a thread's stack
kill <thread id> <expr>   -- kill a thread with the given exception object
interrupt <thread id>     -- interrupt a thread

print <expr>              -- print value of expression
dump <expr>               -- print all object information
eval <expr>               -- evaluate expression (same as print)
set <lvalue> = <expr>     -- assign new value to field/variable/array element
locals                    -- print all local variables in current stack frame

classes                   -- list currently known classes
class <class id>          -- show details of named class
methods <class id>        -- list a class's methods
fields <class id>         -- list a class's fields

threadgroups              -- list threadgroups
threadgroup <name>        -- set current threadgroup to <name>
threadgroup               -- set current threadgroup back to the top level threadgroup

stop [go|thread] [<thread_id>] <at|in> <location>
                          -- set a breakpoint
                          -- if no options are given, the current list of breakpoints is printed
                          -- if "go" is specified, immediately resume after stopping
                          -- if "thread" is specified, only suspend the thread we stop in
                          -- if neither "go" nor "thread" are specified, suspend all threads
                          -- if an integer <thread_id> is specified, only stop in the specified thread
                          -- "at" and "in" have the same meaning
                          -- <location> can either be a line number or a method:
                          --   <class_id>:<line_number>
                          --   <class_id>.<method>[(argument_type,...)]
clear <class id>.<method>[(argument_type,...)]
                          -- clear a breakpoint in a method
clear <class id>:<line>   -- clear a breakpoint at a line
clear                     -- list breakpoints
catch [uncaught|caught|all] <class id>|<class pattern>
                          -- break when specified exception occurs
ignore [uncaught|caught|all] <class id>|<class pattern>
                          -- cancel 'catch' for the specified exception
watch [access|all] <class id>.<field name>
                          -- watch access/modifications to a field
unwatch [access|all] <class id>.<field name>
                          -- discontinue watching access/modifications to a field
trace [go] methods [thread]
                          -- trace method entries and exits.
                          -- All threads are suspended unless 'go' is specified
trace [go] method exit | exits [thread]
                          -- trace the current method's exit, or all methods' exits
                          -- All threads are suspended unless 'go' is specified
untrace [methods]         -- stop tracing method entries and/or exits
step                      -- execute current line
step up                   -- execute until the current method returns to its caller
stepi                     -- execute current instruction
next                      -- step one line (step OVER calls)
cont                      -- continue execution from breakpoint

list [line number|method] -- print source code
use (or sourcepath) [source file path]
                          -- display or change the source path
exclude [<class pattern>, ... | "none"]
                          -- do not report step or method events for specified classes
classpath                 -- print classpath info from target VM

monitor <command>         -- execute command each time the program stops
monitor                   -- list monitors
unmonitor <monitor#>      -- delete a monitor
read <filename>           -- read and execute a command file

lock <expr>               -- print lock info for an object
threadlocks [thread id]   -- print lock info for a thread

pop                       -- pop the stack through and including the current frame
reenter                   -- same as pop, but current frame is reentered
redefine <class id> <class file name>
                          -- redefine the code for a class

disablegc <expr>          -- prevent garbage collection of an object
enablegc <expr>           -- permit garbage collection of an object

!!                        -- repeat last command
<n> <command>             -- repeat command n times
repeat                    -- show whether GDB-style empty command repetition is enabled
repeat <on|off>           -- enable/disable GDB-style repetition
# <command>               -- discard (no-op)
help (or ?)               -- list commands
dbgtrace [flag]           -- same as dbgtrace command line option
version                   -- print version information
exit (or quit)            -- exit debugger

<class id>: a full class name with package qualifiers
<class pattern>: a class name with a leading or trailing wildcard ('*')
<thread id>: thread number as reported in the 'threads' command
<expr>: a Java(TM) Programming Language expression.
Most common syntax is supported.

Startup commands can be placed in either "jdb.ini" or ".jdbrc"
in user.home or user.dir
